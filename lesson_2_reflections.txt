What happens when you initialize a repository? Why do you need to do it?

You create an empty repository. This is create the hidden .git folder which will store any future commit metadata

How is the staging area different from the working directory and the repository? What value do you think it offers?

It acts as a buffer for the commit, and files here are not tracked. It allows you to select which files are updated in a commit, as for some files it may not be appropriate to update within the working directory, especially new or redundant ones.

How can you use the staging area to make sure you have one commit per logical change?

The staging area allows you to add/remove files such that you can ensure the above, which you can check quickly using 'git status'. You can also view the differences between WD/Stage/Master by using git diff to ensure one logical change.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If you want to create a variation/experimental version of a code you are working on. Branches would allow you to edit this without affecting the existing code, which means that if you were to break something, this would not break the working code. We can also choose to merge at a later date if this new feature should be implementd in the original code.

How do the diagrams help you visualize the branch structure?

They help you to identify where the branches bifuricated, and which parts of the code contain which data

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The differences/updates between the branches are merged, and we produce a new tip which contains these changes. This is represented to show that the differences are combined into a single new commit, which has commit parents from both branches.


